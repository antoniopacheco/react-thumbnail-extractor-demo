{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","handleChange","event","setState","file","target","files","onBeforeCapture","console","log","onStartCapture","onUnsupportedVideo","onCapture","images","onComplete","onCompleteDetails","state","this","className","href","type","onChange","accept","displayImages","maxWidth","videoFile","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qRAiEeA,G,kBAzDb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAORC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,KAAMF,EAAMG,OAAOC,MAAM,MAVX,EAalBC,gBAAkB,SAACL,GACjBM,QAAQC,IAAI,iBAAiBP,IAdb,EAgBlBQ,eAAiB,SAACR,GAChBM,QAAQC,IAAI,kBAAkBP,IAjBd,EAmBlBS,mBAAqB,SAACT,GACpBM,QAAQC,IAAI,sBAAsBP,IApBlB,EAuBlBU,UAAY,SAACV,GACXM,QAAQC,IAAI,aAAaP,GACzB,EAAKC,SAAS,CACZU,OAAQX,KA1BM,EA8BlBY,WAAa,SAACZ,GACZM,QAAQC,IAAI,cAAcP,IA/BV,EAkClBa,kBAAoB,SAACb,GACnBM,QAAQC,IAAI,qBAAqBP,IAjCjC,EAAKc,MAAQ,CACXZ,KAAO,KACPS,OAAQ,IAJM,E,sEAwCR,IAAD,EACkBI,KAAKD,MADvB,EACCZ,KADD,EACOS,OACd,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAAa,wDAC/B,6BACE,uBAAGC,KAAK,2FAAR,gBAEF,2BAAOC,KAAK,OAAOC,SAAUJ,KAAKhB,aAAcqB,OAAO,kCACvD,yBAAKJ,UAAU,kBACf,kBAAC,IAAD,CAAoBK,eAAa,EAACC,SAAU,IAAKT,kBAAmBE,KAAKF,kBAAmBD,WAAYG,KAAKH,WAAYF,UAAWK,KAAKL,UAAWD,mBAAoBM,KAAKN,mBAAqBJ,gBAAiBU,KAAKV,gBAAiBG,eAAgBO,KAAKP,eAAgBe,UAAWR,KAAKD,MAAMZ,a,GAnD1RsB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.702accea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport ThumbnailExtractor from 'react-thumbnail-extractor'\nimport { throwStatement } from '@babel/types';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      file:  null,\n      images: []\n    }\n  }\n\n  handleChange = (event) =>{\n    this.setState({\n      file: event.target.files[0]\n    })\n  }\n  onBeforeCapture = (event) => {\n    console.log(\"before capture\",event);\n  }\n  onStartCapture = (event) => {\n    console.log(\"onStartCapture \",event);\n  }\n  onUnsupportedVideo = (event) => {\n    console.log(\"onUnsupportedVideo \",event);\n  }\n\n  onCapture = (event) => {\n    console.log(\"onCapture \",event);\n    this.setState({\n      images: event\n    })\n  }\n\n  onComplete = (event) => {\n    console.log(\"onComplete \",event);\n  }\n\n  onCompleteDetails = (event) => {\n    console.log(\"onCompleteDetails \",event);\n  }\n\n\n  \n  render() {\n    const { file, images } = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\"><h1>ThumbnailExtractor Demo</h1></header>\n        <div>\n          <a href=\"https://github.com/antoniopacheco/react-thumbnail-extractor-demo/blob/master/src/App.js\">Source code</a>\n        </div>\n        <input type=\"file\" onChange={this.handleChange} accept=\"video/mp4,video/x-m4v,video/*\"></input>\n        <div className=\"imageContainer\">\n        <ThumbnailExtractor displayImages maxWidth={600} onCompleteDetails={this.onCompleteDetails} onComplete={this.onComplete} onCapture={this.onCapture} onUnsupportedVideo={this.onUnsupportedVideo}  onBeforeCapture={this.onBeforeCapture} onStartCapture={this.onStartCapture} videoFile={this.state.file} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}